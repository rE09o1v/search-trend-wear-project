name: Scrape Price Data Regularly

on:
  schedule:
    # 毎日午前0時 (UTC) に実行（日本時間午前9時）
    # cronの書式については https://crontab.guru/ などで確認してください
    - cron: '0 0 * * *'
  workflow_dispatch: # GitHubのActionsタブから手動で実行できるようにする

jobs:
  scrape_and_commit:
    runs-on: ubuntu-latest # 最新のUbuntuランナーを使用

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 最新バージョンを確認してください

      - name: Set up Python
        uses: actions/setup-python@v5 # 最新バージョンを確認してください
        with:
          python-version: '3.12' # requirements.txtと互換性のあるバージョンを指定

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # requirements.txtから依存関係をインストール
          # SeleniumがヘッドレスChromeを動かすために必要なパッケージ (Ubuntuの場合)
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Run scraper to update data for all brands
        run: |
          # scraper.pyがbrands.jsonを読み込んで全ブランドを処理するように改修されているか、
          # または、全ブランド処理用のラッパースクリプトをここで呼び出す想定です。
          # ここでは仮に、scraper.pyがその機能を持つとします。
          python scraper.py # scraper.py を実行
        env:
          # もしスクリプト内で環境変数が必要な場合はここで設定
          EXAMPLE_ENV_VAR: ${{ secrets.EXAMPLE_SECRET }}

      - name: Commit and push data changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # dataディレクトリの変更をステージング
          # scraper.pyのDATA_DIRが 'data' であることを想定
          git add data/ 
          git add brands.json # brands.jsonも更新される可能性がある場合

          # 変更があった場合のみコミットとプッシュを実行
          if ! git diff --staged --quiet; then
            git commit -m "Automated data update by GitHub Actions"
            git push
          else
            echo "No data changes to commit."
          fi